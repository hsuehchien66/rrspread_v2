num_post_vac = length(which(metadata_df$vac_period == "post-PCV13"))
for (p in uniq_pair){
selected_pair = metadata_df[which(metadata_df$pair == p),]
t_count = nrow(selected_pair)
if(gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Vaccine_Period"] == "pre-PCV13"){
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_pre_vac
}else{
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_post_vac
}
}
gpsc_sero_vacperiod_df
Generate_GPSC_Serotype_Vaccine_freqtable <- function(metadata_df,
pair_colname1="GPSC", pair_colname2="Serotype.x", pair_colname3="vac_period",
n_output_col=6,
output_colnames=c("GPSC", "Serotype", "Vaccine_Period", "Count", "Proportion", "Pair_Name")){
'''
pair_colname1="GPSC"
pair_colname2="Serotype.x"
pair_colname3="vac_period"
n_output_col=6
output_colnames=c("GPSC", "Serotype", "Vaccine_Period", "Count", "Proportion", "Pair_Name")
'''
for(isolate in 1:nrow(metadata_df)){
metadata_df[isolate, "pair"] = paste(metadata_df[isolate, pair_colname1],
metadata_df[isolate, pair_colname2],
metadata_df[isolate, pair_colname3], sep = "_")
}
pair_freq <- as.data.frame(table(metadata_df$pair))
colnames(pair_freq) <- c("name", "freq")
dsize <- matrix(0, nrow = nrow(pair_freq), ncol = n_output_col)
gpsc_sero_vacperiod_df = as.data.frame(dsize)
colnames(gpsc_sero_vacperiod_df ) <- output_colnames
for (i in 1:nrow(pair_freq)) {
gpsc = strsplit(as.character(pair_freq[i,1]), "_")[[1]][1]
pair_freq$gpsc[i] = gpsc
sero = strsplit(as.character(pair_freq[i,1]),"_")[[1]][2]
vac_period = strsplit(as.character(pair_freq[i,1]),"_")[[1]][3]
gpsc_sero_vacperiod_df[i, "GPSC"] = gpsc
gpsc_sero_vacperiod_df[i, "Serotype"] = sero
gpsc_sero_vacperiod_df[i, "Vaccine_Period"] = vac_period
gpsc_sero_vacperiod_df[i, "Pair_Name"] = as.character(pair_freq[i, "name"])
}
uniq_pair = unique(metadata_df$pair)
### each row is a population-serotype-gpsc pair
num_pre_vac = length(which(metadata_df$vac_period == "pre-PCV13"))
num_post_vac = length(which(metadata_df$vac_period == "post-PCV13"))
for (p in uniq_pair){
selected_pair = metadata_df[which(metadata_df$pair == p),]
t_count = nrow(selected_pair)
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Count"] = t_count
if(gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Vaccine_Period"] == "pre-PCV13"){
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_pre_vac
}else{
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_post_vac
}
}
return(gpsc_sero_vacperiod_df)
}
GPS_freq_table <- Generate_GPSC_Serotype_Vaccine_freqtable(metadata_df = metadata_df)
Generate_GPSC_Serotype_Vaccine_freqtable <- function(metadata_df,
pair_colname1="GPSC", pair_colname2="Serotype.x", pair_colname3="vac_period",
n_output_col=6,
output_colnames=c("GPSC", "Serotype", "Vaccine_Period", "Count", "Proportion", "Pair_Name")){
for(isolate in 1:nrow(metadata_df)){
metadata_df[isolate, "pair"] = paste(metadata_df[isolate, pair_colname1],
metadata_df[isolate, pair_colname2],
metadata_df[isolate, pair_colname3], sep = "_")
}
pair_freq <- as.data.frame(table(metadata_df$pair))
colnames(pair_freq) <- c("name", "freq")
dsize <- matrix(0, nrow = nrow(pair_freq), ncol = n_output_col)
gpsc_sero_vacperiod_df = as.data.frame(dsize)
colnames(gpsc_sero_vacperiod_df ) <- output_colnames
for (i in 1:nrow(pair_freq)) {
gpsc = strsplit(as.character(pair_freq[i,1]), "_")[[1]][1]
pair_freq$gpsc[i] = gpsc
sero = strsplit(as.character(pair_freq[i,1]),"_")[[1]][2]
vac_period = strsplit(as.character(pair_freq[i,1]),"_")[[1]][3]
gpsc_sero_vacperiod_df[i, "GPSC"] = gpsc
gpsc_sero_vacperiod_df[i, "Serotype"] = sero
gpsc_sero_vacperiod_df[i, "Vaccine_Period"] = vac_period
gpsc_sero_vacperiod_df[i, "Pair_Name"] = as.character(pair_freq[i, "name"])
}
uniq_pair = unique(metadata_df$pair)
### each row is a population-serotype-gpsc pair
num_pre_vac = length(which(metadata_df$vac_period == "pre-PCV13"))
num_post_vac = length(which(metadata_df$vac_period == "post-PCV13"))
for (p in uniq_pair){
selected_pair = metadata_df[which(metadata_df$pair == p),]
t_count = nrow(selected_pair)
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Count"] = t_count
if(gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Vaccine_Period"] == "pre-PCV13"){
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_pre_vac
}else{
gpsc_sero_vacperiod_df[which(gpsc_sero_vacperiod_df$Pair_Name == p), "Proportion"] = t_count/num_post_vac
}
}
return(gpsc_sero_vacperiod_df)
}
GPS_freq_table <- Generate_GPSC_Serotype_Vaccine_freqtable(metadata_df = metadata_df)
head(GPS_freq_table)
dim(GPS_freq_table)
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"))
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"))
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"))
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("GPSC")+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"))
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("GPSC")+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"))+
theme_bw()
GPS_freq_table$GPSC
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("GPSC")+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"))+
theme_bw()
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("GPSC")+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
GPS_freq_table$Serotype
serotype_colorcode <- read.table("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/serotype__colours.csv")
head(serotype_colorcode)
serotype_colorcode <- read.table("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/serotype__colours.csv",
sep = ",")
head(serotype_colorcode)
serotype_colorcode <- read.table("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/serotype__colours.csv",
sep = ",", comment.char = "&")
head(serotype_colorcode)
serotype_colorcode <- read.table("/Users/hc14/Documents/GPS_collaborator/ISPPD13_workshop/serotype__colours.csv",
sep = ",", comment.char = "&", header = TRUE)
head(serotype_colorcode)
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("GPSC")+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
scale_fill_manual(breaks = serotype_colorcode$Serotype,
values= serotype_colorcode$Serotype__colour)
ggplot(GPS_freq_table) +
geom_bar(aes(x = Vaccine_Period, y = Proportion, fill = Serotype),
position = "stack",
stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab("GPSC")+
facet_grid(~ GPSC, switch = "x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, color = "white"),
panel.spacing = unit(-.01,"cm"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
scale_fill_manual(breaks = serotype_colorcode$Serotype,
values= serotype_colorcode$Serotype__colour)
library(ggplot2)
library(gridExtra)
lollipop_cluster_freqs <- function(data1, data2, data3, model1, model2, model3){
lollipop_data_1 <- data.frame(
x=1:length(data1),
model_1=model1 / sum(model1),
data_1=as.numeric(data1 / sum(data1))
)
lollipop_data_2 <- data.frame(
x=1:length(data2),
model_2=model2 / sum(model2),
data_2=as.numeric(data2 / sum(data2))
)
lollipop_data_3 <- data.frame(
x=1:length(data3),
model_3=model3 / sum(model3),
data_3=as.numeric(data3 / sum(data3))
)
# Change baseline
lollipop_plot_1 <- ggplot(lollipop_data_1) +
geom_segment( aes(x=x, xend=x, y=model_1, yend=data_1), color="grey") +
geom_point( aes(x=x, y=model_1, color="Model non-VT"), size=3 ) +
geom_point( aes(x=x, y=data_1, color="Data non_VT"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2001") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1),max(lollipop_data_1$data_1),max(lollipop_data_2$model_2),max(lollipop_data_2$data_2),max(lollipop_data_3$model_3),max(lollipop_data_3$data_3)))
lollipop_plot_2 <- ggplot(lollipop_data_2) +
geom_segment( aes(x=x, xend=x, y=model_2, yend=data_2), color="grey") +
geom_point( aes(x=x, y=model_2, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data_2, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Group") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = "none") +
ggtitle("2004") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1),max(lollipop_data_1$data_1),max(lollipop_data_2$model_2),max(lollipop_data_2$data_2),max(lollipop_data_3$model_3),max(lollipop_data_3$data_3)))
lollipop_plot_3 <- ggplot(lollipop_data_3) +
geom_segment( aes(x=x, xend=x, y=model_3, yend=data_3), color="grey") +
geom_point( aes(x=x, y=model_3, color="Model"), size=3 ) +
geom_point( aes(x=x, y=data_3, color="Data"), size=3 ) +
scale_color_manual(values = c("#E69F00", "#56B4E9"),
guide  = guide_legend(),
name   = "Legend") +
coord_flip()+
#theme_ipsum() +
theme(legend.position = c(.8,.8),legend.text = element_text(size = 20),legend.title = element_text(size = 20)) +
ggtitle("2007") +
ylab("Frequency") +
xlab("Clusters") +
theme(axis.title  = element_text(size = 20), axis.text = element_text(size = 20), plot.title = element_text(size = 25,hjust = 0.5))  +
ylim(0, max(max(lollipop_data_1$model_1),max(lollipop_data_1$data_1),max(lollipop_data_2$model_2),max(lollipop_data_2$data_2),max(lollipop_data_3$model_3),max(lollipop_data_3$data_3)))
grid.arrange(lollipop_plot_1 + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()) ,lollipop_plot_2 +  theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), lollipop_plot_3 + theme(plot.margin = unit(c(.5,0.5,1,0.5), "cm"),axis.text.y = element_blank()), ncol = 3, nrow=1)
}
# example usage
# simulated data
d1 <- runif(10,min=0,max=1)
d2 <- runif(10,min=0,max=1)
d3 <- runif(10,min=0,max=1)
# simulated model values
m1 <- runif(10,min=0,max=1)
m2 <- runif(10,min=0,max=1)
m3 <- runif(10,min=0,max=1)
lollipop_cluster_freqs(d1,d2,d3,m1,m2,m3)
# example usage
# simulated data
d1 <- runif(10,min=0,max=1)
d2 <- runif(10,min=0,max=1)
d3 <- runif(10,min=0,max=1)
# simulated model values
m1 <- runif(10,min=0,max=1)
m2 <- runif(10,min=0,max=1)
m3 <- runif(10,min=0,max=1)
lollipop_cluster_freqs(d1,d2,d3,m1,m2,m3)
library(ggplot2)
library(ggpattern)
install.packages("ggpattern")
library(ggpattern)
rm(list = ls())
library(rrspread)
help("plt_gubbin_tree")
help("match_tree_meta")
help("time_resolved")
help("bind_multitree")
help("gen_dist_mat")
help("gen_divtime_mat")
help("RR_matrix")
help("Geo_Strain_Calc_RR")
help("RR_bootstrap")
help("PltRR")
help("PltRR_rolling")
help("to.upper")
help(RR_matrix_notree)
help("RR_matrix_notree")
setwd("/Users/hc14/Documents/SpneumoIsrael/RR_script/package/rrspread_v2/rrspread_v2")
getwd
getwd()
document()
library(devtools)
library(roxygen2)
document()
remove.packages("rrspread")
library(rrspread)
remove.packages("rrspread")
library(rrspread)
help(RR_matrix_notree)
setwd("/Users/hc14/Desktop")
help(RR_matrix_notree)
remove.packages("rrspread")
remove.packages("rrspread_v2")
.libPaths()
dev_mode(true)
setwd("/Users/hc14/Documents/SpneumoIsrael/RR_script/package/rrspread_v2/rrspread_v2")
dev_mode(true)
library(rrspread)
.libPaths()
cd /Users/hc14/Library/R/x86_64/4.3/library
metadata_file_path = "/Users/hc14/Documents/SpneumoIsrael/Israel_raw_data/input/Israel_1174isolates_metadata_input.txt"
metadata = read.csv(metadata_file_path, sep="\t")
metadata = metadata[, c("lane_id", "GPSC_PoPUNK2", "REGION", "Longitude", "Latitude", "Year_collection")]
gpsc8_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC8_reference_bwa.final_tree.tre"
gpsc8_gubbin_tree = read.tree(gpsc8_gubbin_tree_path)
gpsc55_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC55_reference_bwa.final_tree.tre"
gpsc55_gubbin_tree = read.tree(gpsc55_gubbin_tree_path)
gpsc47_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC47_reference_bwa.final_tree.tre"
gpsc47_gubbin_tree = read.tree(gpsc47_gubbin_tree_path)
gpsc6_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC6_reference_bwa.final_tree.tre"
gpsc6_gubbin_tree = read.tree(gpsc6_gubbin_tree_path)
gpsc10_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC10_reference_bwa.final_tree.tre"
gpsc10_gubbin_tree = read.tree(gpsc10_gubbin_tree_path)
load(file = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/bdtree_mixgamma.RData")
gpsc08_bd_tree = gpsc8_bd_res$BactDating$tree
gpsc55_bd_tree = gpsc55_bd_res$BactDating$tree
gpsc47_bd_tree = gpsc47_bd_res$BactDating$tree
gpsc06_bd_tree = gpsc6_bd_res$BactDating$tree
gpsc10_bd_tree = gpsc10_bd_res$BactDating$tree
multitrees = bind_multitree(gpsc08_bd_tree, gpsc55_bd_tree, gpsc47_bd_tree, gpsc06_bd_tree, gpsc10_bd_tree)
plot(multitrees, cex=0.3, no.margin = TRUE)
plot(multitrees, cex=0.3, no.margin = TRUE)
help(pltRR_rolling_divtime)
rm(list = ls())
library(rrspread)
metadata_file_path = "/Users/hc14/Documents/SpneumoIsrael/Israel_raw_data/input/Israel_1174isolates_metadata_input.txt"
metadata = read.csv(metadata_file_path, sep="\t")
metadata = metadata[, c("lane_id", "GPSC_PoPUNK2", "REGION", "Longitude", "Latitude", "Year_collection")]
gpsc8_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC8_reference_bwa.final_tree.tre"
gpsc8_gubbin_tree = read.tree(gpsc8_gubbin_tree_path)
gpsc55_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC55_reference_bwa.final_tree.tre"
gpsc55_gubbin_tree = read.tree(gpsc55_gubbin_tree_path)
gpsc47_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC47_reference_bwa.final_tree.tre"
gpsc47_gubbin_tree = read.tree(gpsc47_gubbin_tree_path)
gpsc6_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC6_reference_bwa.final_tree.tre"
gpsc6_gubbin_tree = read.tree(gpsc6_gubbin_tree_path)
gpsc10_gubbin_tree_path = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/05_topGPSC_gubbin_output_tree/GPSC10_reference_bwa.final_tree.tre"
gpsc10_gubbin_tree = read.tree(gpsc10_gubbin_tree_path)
load(file = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/bdtree_mixgamma.RData")
rm(list = ls())
library(ape)
library(BactDating)
load(file = "/Users/hc14/Documents/SpneumoIsrael/analysis_results/bdtree_mixgamma.RData")
gpsc08_bd_tree = gpsc8_bd_res$BactDating$tree
gpsc55_bd_tree = gpsc55_bd_res$BactDating$tree
gpsc47_bd_tree = gpsc47_bd_res$BactDating$tree
gpsc06_bd_tree = gpsc6_bd_res$BactDating$tree
gpsc10_bd_tree = gpsc10_bd_res$BactDating$tree
multitrees = bind_multitree(gpsc08_bd_tree, gpsc55_bd_tree, gpsc47_bd_tree, gpsc06_bd_tree, gpsc10_bd_tree)
plot(multitrees, cex=0.3, no.margin = TRUE)
lanes <- multitrees$tip.label
## subset only those present in the trees
####metadata = read.csv(metadata_file)
selected_gpsc_metadata = subset(metadata, metadata$lane_id %in% lanes)
lanes_gpsc <- subset(lanes, lanes  %in% selected_gpsc_metadata$lane_id)
multitrees_overall <- keep.tip(multitrees, lanes_gpsc)
#Reorder tree based on order of tip labels
order <- multitrees_overall$tip.label
selected_gpsc_metadata <- selected_gpsc_metadata %>%
dplyr::slice(match(order, lane_id))
gpsc6_metadata <- selected_gpsc_metadata[which(selected_gpsc_metadata$GPSC_PoPUNK2 == "6"),]
gpsc8_metadata <- selected_gpsc_metadata[which(selected_gpsc_metadata$GPSC_PoPUNK2 == "8"),]
gpsc10_metadata <- selected_gpsc_metadata[which(selected_gpsc_metadata$GPSC_PoPUNK2 == "10"),]
gpsc47_metadata <- selected_gpsc_metadata[which(selected_gpsc_metadata$GPSC_PoPUNK2 == "47"),]
gpsc55_metadata <- selected_gpsc_metadata[which(selected_gpsc_metadata$GPSC_PoPUNK2 == "55"),]
gpsc6_rrmatrix <- RR_matrix(meta_table = gpsc6_metadata, bactdate_tree = gpsc6_bd_res$BactDating$tree, ref_distance_min = 0)
gpsc8_rrmatrix <- RR_matrix(meta_table = gpsc8_metadata, bactdate_tree = gpsc8_bd_res$BactDating$tree, ref_distance_min = 0)
gpsc10_rrmatrix <- RR_matrix(meta_table = gpsc10_metadata, bactdate_tree = gpsc10_bd_res$BactDating$tree, ref_distance_min = 0)
gpsc47_rrmatrix <- RR_matrix(meta_table = gpsc47_metadata, bactdate_tree = gpsc47_bd_res$BactDating$tree, ref_distance_min = 0)
gpsc55_rrmatrix <- RR_matrix(meta_table = gpsc55_metadata, bactdate_tree = gpsc55_bd_res$BactDating$tree, ref_distance_min = 0)
### GPSC6
gpsc6_distance_dist <- as.data.frame(to.upper(gpsc6_rrmatrix$distance_num_mat))
gpsc6_divtime_dist <- as.data.frame(to.upper(gpsc6_rrmatrix$divtime_num_mat))
gpsc6_divtime_distance <- cbind(gpsc6_divtime_dist, gpsc6_distance_dist)
colnames(gpsc6_divtime_distance) <- c("divtime", "distance")
### GPSC8
gpsc8_distance_dist <- as.data.frame(to.upper(gpsc8_rrmatrix$distance_num_mat))
gpsc8_divtime_dist <- as.data.frame(to.upper(gpsc8_rrmatrix$divtime_num_mat))
gpsc8_divtime_distance <- cbind(gpsc8_divtime_dist, gpsc8_distance_dist)
colnames(gpsc8_divtime_distance) <- c("divtime", "distance")
### GPSC10
gpsc10_distance_dist <- as.data.frame(to.upper(gpsc10_rrmatrix$distance_num_mat))
gpsc10_divtime_dist <- as.data.frame(to.upper(gpsc10_rrmatrix$divtime_num_mat))
gpsc10_divtime_distance <- cbind(gpsc10_divtime_dist, gpsc10_distance_dist)
colnames(gpsc10_divtime_distance) <- c("divtime", "distance")
### GPSC47
gpsc47_distance_dist <- as.data.frame(to.upper(gpsc47_rrmatrix$distance_num_mat))
gpsc47_divtime_dist <- as.data.frame(to.upper(gpsc47_rrmatrix$divtime_num_mat))
gpsc47_divtime_distance <- cbind(gpsc47_divtime_dist, gpsc47_distance_dist)
colnames(gpsc47_divtime_distance) <- c("divtime", "distance")
### GPSC55
gpsc55_distance_dist <- as.data.frame(to.upper(gpsc55_rrmatrix$distance_num_mat))
gpsc55_divtime_dist <- as.data.frame(to.upper(gpsc55_rrmatrix$divtime_num_mat))
gpsc55_divtime_distance <- cbind(gpsc55_divtime_dist, gpsc55_distance_dist)
colnames(gpsc55_divtime_distance) <- c("divtime", "distance")
### GPSC all
gpsc_all_divtime_distance <- rbind(gpsc6_divtime_distance, gpsc8_divtime_distance, gpsc10_divtime_distance,gpsc47_divtime_distance, gpsc55_divtime_distance)
plot(gpsc_all_divtime_distance$divtime, gpsc_all_divtime_distance$distance)
Dtime_Dist_CI_posterior_tree <- function(metadata, bd_res, initial_window=5, Ntreestosample=100, divtime_nboot=20, upper_window=50)
{
################################################################
## Sample trees from BactDating posterior
## Noemie Lefrancq
## Last update 21/09/2023
################################################################
## Load Bactdating result
#resbd <- readRDS('bd_GPSC8')
Ntips = length(bd_res$BactDating$tree$tip.label)
Ntreestosample = 100
## ID of tree to sample
tree_ID = round(seq(1, nrow(bd_res$BactDating$record), length.out = Ntreestosample))
################################################################
## Reconstruct one tree from the trace
################################################################
## Withdraw node heights
posterior_sampling <- array(NA, dim=c(Ntips, Ntips, Ntreestosample))
for(samp in 1:Ntreestosample){
tip_dates = bd_res$BactDating$record[tree_ID[samp],1:Ntips]
node_dates = bd_res$BactDating$record[tree_ID[samp],(Ntips+1):(2*Ntips-1)]
tipandnodes_dates = c(tip_dates, node_dates)
## Take BD final tree for template
reconstructed_tree = bd_res$BactDating$tree
## Replace edge lengths, based on the tip and node dates that were extracted above
reconstructed_tree$edge.length = tipandnodes_dates[reconstructed_tree$edge[,2]] - tipandnodes_dates[reconstructed_tree$edge[,1]]
## pairwise distance
reconstructed_pairwise_dist = cophenetic.phylo(reconstructed_tree)
posterior_sampling[,,samp] <- reconstructed_pairwise_dist
}
for (i in 1:Ntips) {
gpsc_divtime_posterior_mean <- apply(posterior_sampling, c(1,2), FUN=function(isamp) mean(isamp))
gpsc_divtime_posterior_upperci <- apply(posterior_sampling, c(1,2), FUN = function(isamp) quantile(isamp, probs = 0.975, na.rm = T))
gpsc_divtime_posterior_lowerci <- apply(posterior_sampling, c(1,2), FUN = function(isamp) quantile(isamp, probs = 0.075, na.rm = T))
}
gpsc_rrmatrix <- RR_matrix(meta_table = metadata, bactdate_tree = bd_res$BactDating$tree)
gpsc_distance_dist <- as.data.frame(to.upper(gpsc_rrmatrix$distance_num_mat))
gpsc_divtime_dist <- as.data.frame(to.upper(gpsc_divtime_posterior_mean))
gpsc_dist_divtime_boot <- cbind(gpsc_distance_dist, gpsc_divtime_dist)
colnames(gpsc_dist_divtime_boot) <- c("distance", "divtime")
nboot = divtime_nboot
x_divtime_max = seq(from=initial_window, to=upper_window, by=1)
x_divtime_min = rep(0, length(x_divtime_max))
#x_divtime_min = seq(from=0, to=20, by=1)
boot_select <- data.frame()
for (win in 1:length(x_divtime_max)) {
boot.mean <- c()
for (n in 1:nboot) {
a = which(gpsc_dist_divtime_boot$divtime > x_divtime_min[win] &
gpsc_dist_divtime_boot$divtime < x_divtime_max[win])        #select a certain region (index)
if (length(a)!=0){
b = sample(x=a, size=100, replace = T)  #subsample with replacement
resample.mean <- mean(gpsc_dist_divtime_boot[b, ]$distance)
boot.mean <- c(boot.mean, resample.mean)
}
}
distance.med <- quantile(boot.mean, probs = c(0.5), na.rm=T) #calculate confidence interval
distance.mean <- mean(boot.mean)
distance.upperci <- quantile(boot.mean, probs = c(0.975), na.rm=T)
distance.lowerci <- quantile(boot.mean, probs = c(0.025), na.rm=T)
mid_win <- mean(c(x_divtime_min[win], x_divtime_max[win]))
window_divtime_distance <- cbind(x_divtime_min[win], x_divtime_max[win], mid_win, distance.med, distance.mean, distance.upperci, distance.lowerci)
boot_select <- rbind(boot_select, window_divtime_distance)
}
res_bootstrap_divtime_dist = list("window_divtime_dist" = boot_select, "divtime_dist_table" = gpsc_dist_divtime_boot)
return(res_bootstrap_divtime_dist)
}
gpsc6_Dtime_Dist_CI_posterior_tree <- Dtime_Dist_CI_posterior_tree(gpsc6_metadata, gpsc6_bd_res)
#gpsc8_Dtime_Dist_CI_posterior_tree <- Dtime_Dist_CI_posterior_tree(gpsc8_metadata, gpsc8_bd_res)
#gpsc10_Dtime_Dist_CI_posterior_tree <- Dtime_Dist_CI_posterior_tree(gpsc10_metadata, gpsc10_bd_res)
#gpsc47_Dtime_Dist_CI_posterior_tree <- Dtime_Dist_CI_posterior_tree(gpsc47_metadata, gpsc47_bd_res, initial_window=10)
#gpsc55_Dtime_Dist_CI_posterior_tree <- Dtime_Dist_CI_posterior_tree(gpsc55_metadata, gpsc55_bd_res)
